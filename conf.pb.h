// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_conf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_conf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_conf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_conf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_conf_2eproto;
namespace conf {
class Configuration;
struct ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
}  // namespace conf
PROTOBUF_NAMESPACE_OPEN
template<> ::conf::Configuration* Arena::CreateMaybeMessage<::conf::Configuration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace conf {

enum Configuration_Status : int {
  Configuration_Status_START = 0,
  Configuration_Status_STOP = 1,
  Configuration_Status_QUIT = 2,
  Configuration_Status_Configuration_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Configuration_Status_Configuration_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Configuration_Status_IsValid(int value);
constexpr Configuration_Status Configuration_Status_Status_MIN = Configuration_Status_START;
constexpr Configuration_Status Configuration_Status_Status_MAX = Configuration_Status_QUIT;
constexpr int Configuration_Status_Status_ARRAYSIZE = Configuration_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_Status_descriptor();
template<typename T>
inline const std::string& Configuration_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Configuration_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Configuration_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Configuration_Status_descriptor(), enum_t_value);
}
inline bool Configuration_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Configuration_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Configuration_Status>(
    Configuration_Status_descriptor(), name, value);
}
// ===================================================================

class Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:conf.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  ~Configuration() override;
  explicit constexpr Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return new Configuration();
  }

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Configuration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "conf.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Configuration_Status Status;
  static constexpr Status START =
    Configuration_Status_START;
  static constexpr Status STOP =
    Configuration_Status_STOP;
  static constexpr Status QUIT =
    Configuration_Status_QUIT;
  static inline bool Status_IsValid(int value) {
    return Configuration_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Configuration_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Configuration_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Configuration_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Configuration_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Configuration_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Configuration_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLogFilePathFieldNumber = 2,
    kThresholdFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string logFilePath = 2;
  void clear_logfilepath();
  const std::string& logfilepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logfilepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logfilepath();
  PROTOBUF_MUST_USE_RESULT std::string* release_logfilepath();
  void set_allocated_logfilepath(std::string* logfilepath);
  private:
  const std::string& _internal_logfilepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logfilepath(const std::string& value);
  std::string* _internal_mutable_logfilepath();
  public:

  // float threshold = 3;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // .conf.Configuration.Status status = 4;
  void clear_status();
  ::conf::Configuration_Status status() const;
  void set_status(::conf::Configuration_Status value);
  private:
  ::conf::Configuration_Status _internal_status() const;
  void _internal_set_status(::conf::Configuration_Status value);
  public:

  // @@protoc_insertion_point(class_scope:conf.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfilepath_;
  float threshold_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_conf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Configuration

// string name = 1;
inline void Configuration::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Configuration::name() const {
  // @@protoc_insertion_point(field_get:conf.Configuration.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conf.Configuration.name)
}
inline std::string* Configuration::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:conf.Configuration.name)
  return _s;
}
inline const std::string& Configuration::_internal_name() const {
  return name_.Get();
}
inline void Configuration::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configuration::release_name() {
  // @@protoc_insertion_point(field_release:conf.Configuration.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configuration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:conf.Configuration.name)
}

// string logFilePath = 2;
inline void Configuration::clear_logfilepath() {
  logfilepath_.ClearToEmpty();
}
inline const std::string& Configuration::logfilepath() const {
  // @@protoc_insertion_point(field_get:conf.Configuration.logFilePath)
  return _internal_logfilepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_logfilepath(ArgT0&& arg0, ArgT... args) {
 
 logfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:conf.Configuration.logFilePath)
}
inline std::string* Configuration::mutable_logfilepath() {
  std::string* _s = _internal_mutable_logfilepath();
  // @@protoc_insertion_point(field_mutable:conf.Configuration.logFilePath)
  return _s;
}
inline const std::string& Configuration::_internal_logfilepath() const {
  return logfilepath_.Get();
}
inline void Configuration::_internal_set_logfilepath(const std::string& value) {
  
  logfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_logfilepath() {
  
  return logfilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configuration::release_logfilepath() {
  // @@protoc_insertion_point(field_release:conf.Configuration.logFilePath)
  return logfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configuration::set_allocated_logfilepath(std::string* logfilepath) {
  if (logfilepath != nullptr) {
    
  } else {
    
  }
  logfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logfilepath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:conf.Configuration.logFilePath)
}

// float threshold = 3;
inline void Configuration::clear_threshold() {
  threshold_ = 0;
}
inline float Configuration::_internal_threshold() const {
  return threshold_;
}
inline float Configuration::threshold() const {
  // @@protoc_insertion_point(field_get:conf.Configuration.threshold)
  return _internal_threshold();
}
inline void Configuration::_internal_set_threshold(float value) {
  
  threshold_ = value;
}
inline void Configuration::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:conf.Configuration.threshold)
}

// .conf.Configuration.Status status = 4;
inline void Configuration::clear_status() {
  status_ = 0;
}
inline ::conf::Configuration_Status Configuration::_internal_status() const {
  return static_cast< ::conf::Configuration_Status >(status_);
}
inline ::conf::Configuration_Status Configuration::status() const {
  // @@protoc_insertion_point(field_get:conf.Configuration.status)
  return _internal_status();
}
inline void Configuration::_internal_set_status(::conf::Configuration_Status value) {
  
  status_ = value;
}
inline void Configuration::set_status(::conf::Configuration_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:conf.Configuration.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace conf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::conf::Configuration_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::conf::Configuration_Status>() {
  return ::conf::Configuration_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_conf_2eproto
